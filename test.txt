Ppi val and eval
%{
#include <ctype.h>
#include <stdio.h>
#include <math.h>
#define YYSTYPE double 
int flag =0;
%}
%token NUMBER
%left '+' '-'
%left '*' '/' '^'
%right UMINUS
%%
lines : lines expri '\n' {printf("valid infix expression\n"); printf("%g\n", $2); }
      | lines '\n'
      | lines expr '\n' {printf("valid postfix expression\n"); printf("%g\n", $2); }
      |lines exprp '\n' {printf("valid prefix expression\n"); printf("%g\n", $2); }
      | /* empty */
;
expri : expri '+' expri  { $$ = $1 + $3; }
     | expri '-' expri  { $$ = $1 - $3; }
     | expri '*' expri  { $$ = $1 * $3; }
     | expri '/' expri  { $$ = $1 / $3; }
     | '(' expri ')' { $$ =$2;}
     | NUMBER
;
expr : expr expr '+'  { $$ = $1 + $2; }
     | expr expr '-'  { $$ = $1 - $2; }
     | expr expr '*'  { $$ = $1 * $2; }
     | expr expr '/'  { $$ = $1 / $2; }
     | NUMBER
;

exprp : '+' exprp exprp  { $$ = $2 + $3; }
     | '-' exprp exprp  { $$ = $2 - $3; }
     | '*' exprp exprp   { $$ = $2 * $3; }
     | '/' exprp exprp  { $$ = $2 / $3; }
     | NUMBER
;
%%
float yylex() {
int c;
while ( ( c = getchar() ) == ' ' );
if ( (c == '.') || (isdigit(c)) ) {
ungetc(c, stdin);
scanf("%lf", &yylval);
return NUMBER;
}
return c;
}
void yyerror(const char *s){
        printf("Invalid\n");
        flag =1;
        }
void main() {
        printf("Enter any expr:\n");
        yyparse();
        if(flag==0) {
        printf("\nvalid expression");
        }
}

For

%option noyywrap
%{
        #include<stdio.h>
        #include "y.tab.h"
%}
%%
[ \t\n] ;
for     return FOR;
[a-zA-Z][_a-zA-Z0-9]* return ID;
[0-9]+          return NUMBER;
"!"|"&&"|"||"     return OPER;
">"|"<"|"<="|">="  return GL;
"=="            return E;
"!="            return NE;
"+"|"-"|"*"|"/"    return ARITH;
"="     return EQ;
";"     return SC;
"{"     return OB;
"}"     return CB;
"("     return OP;
")"     return CP;
"++"|"--"    return INDEC;
. ;
%%
%{
        #include<stdio.h>
%}
%token ID NUMBER FOR GL E NE OP CP OB CB SC OPER INDEC ARITH EQ
%%
crt:for  { printf("Valid "); }
for:    FOR OP init SC conditions SC increment CP body ;
body:   OB stmts CB |
        for|
        stmt SC ;
stmts:  stmt SC stmts |
        stmt SC |
        for ;
init:   stmt |
        ;
conditions:     condition OPER conditions |
                condition ;
condition:      factor relop factor;
increment:      stmt |
                ID INDEC |
                INDEC ID |
                ;
stmt:   ID EQ term ;
term:   term ARITH factor |
        factor;
factor: ID |
        NUMBER ;
relop: GL | E | NE;
%%
void yyerror(const char *str) {
        printf("Error ");
}
int main() {
        yyparse();
        return 0;
}
[s2021103535@centos8-linux Tue Oct 31 07:17 AM w10]$ cat switch.l
%option noyywrap
%{
        #include<stdio.h>
        #include "y.tab.h"
%}
%%
[ \t\n] ;
switch     return SWITCH;
case       return CASE;
default    return DEFAULT;
break      return BREAK;
[a-zA-Z][_a-zA-Z0-9]* return ID;
[0-9]+                return NUMBER;
"!"|"&&"|"||"         return OPER;
">"|"<"|"<="|">="     return GL;
"=="                  return E;
"!="                  return NE;
"+"|"-"|"*"|"/"       return ARITH;
"="     return EQ;
";"     return SC;
"{"     return OB;
"}"     return CB;
"("     return OP;
")"     return CP;
":"     return C;
"++""--"              return INDEC;
. ;
%%


[s2021103535@centos8-linux Tue Oct 31 07:17 AM w10]$ cat switch.y
%{
        #include<stdio.h>
%}
%token ID NUMBER SWITCH CASE DEFAULT BREAK GL E NE OP CP OB CB SC OPER INDEC ARITH EQ C
%%
crt:switch  { printf("Valid "); }
switch:    SWITCH OP factor CP OB case CB ;
case:     CASE  factor C  stmts  BREAK SC  |
          case CASE factor C  stmts  BREAK SC |
          case last;
last: DEFAULT C stmts BREAK SC;
body:    stmts BREAK SC ; 
stmts:  stmt SC stmts |
        stmt SC ;

stmt:   ID EQ term | ID INDEC | INDEC ID;
term:   term ARITH factor | term OPER factor |
        factor;
 
factor: ID |
        NUMBER ;

%%
void yyerror(const char *str) {
        printf("Error ");
}
int main() {
        yyparse();
        return 0;
}

[s2021103535@centos8-linux Tue Oct 31 07:18 AM w10]$ cat while.l
%{
#include<stdio.h>
#include<stdlib.h>
#include "y.tab.h"
extern int yyval;
%}

alpha [A-Za-z]
digit [0-9]

%%
" " return SPACE;
[ /t] ;
"printf(hello world)" return INSIDE;
"int main()\n{\n" return START;
"\nreturn 0;\n}" return END;
while return WHILE;
"int"|"float"|"char" return KEY;
";" return SEM;
[sS][0-9]*|[a-b]* return S;
[0-9]+ return NUM;
[A-Za-z]([A-Za-z]|[0-9])* return ID;
"<="|">="|"=="|"!="|"||"|"&&"|"<"|">" return RELOP;
"=" return EQ;
"+"|"-" return OP;
"++"|"--" return INC;
"\n" return NL;
. return(yytext[0]);

%%

[s2021103535@centos8-linux Tue Oct 31 07:18 AM w10]$ cat while.y
%{
#include<stdio.h>
#include<ctype.h>
#include<stdlib.h>

int yylex();
int yyerror();
int count=0;
extern int yyin;
%}


%token WHILE RELOP NUM ID NL EQ OP INC KEY SEM S INSIDE START END SPACE
%%

stmt:START while_stmt NL {printf("Valid While loop\n");exit(0);};
while_stmt: WHILE'('cond ')' NL '{' NL INSIDE SEM NL incre SEM NL'}'END {count++;}
        |ID;
incre: x INC | x EQ x OP x|INC x;
init: x EQ x SEM;
cond: x RELOP x ;
x: ID | NUM;
%%

void main(int argc, char* argv[]) {
FILE *fp=fopen("s1.txt", "r");
yyin=fp;
yyparse();
}
int yywrap()
{}
yyerror(char const *s)
{
printf("Invalid\n");
}
If elseeee
[s2021103535@centos8-linux Tue Oct 31 07:21 AM w11]$ cat 1.l
%{                                                                                                                                                                      
#include<stdio.h>                                                                                                                                                       
#include<stdlib.h>                                                                                                                                                      
#include<ctype.h>                                                                                                                                                       
#include "y.tab.h"                                                                                                                                                      
extern int yylval;                                                                                                                                                       
%}                                                                                                                                                                      
%%
"if" return ifc;                                                                                                                                                     
"then" return then;                                                                                                                                                     
[0-9] {yylval=atoi(yytext);return num;}                                                                                                                                 
")" return cp;                                                                                                                                                     
"(" return op;                                                                                                                                                      
"<" return lt;                                                                                                                                                          
">" return gt;                                                                                                                                                          
"=" return eq;                                                                                                                                                          
";" return sc;                                                                                                                                                       
"!" return not;                                                                                                                                                         
"&&" return and;                                                                                                                                                        
"||" return or;
\n return nl;
[ \t] ;                                                                                                                                                                                                                                
[a-zA-Z] return cha;                                                                                                                                                    
. return(yytext[0]);                                                                                                                              
                                                                                                                                                      
%%   
[s2021103535@centos8-linux Tue Oct 31 07:21 AM w11]$ cat 1.y
%{                                                                                                                                                                      
#include<stdio.h>                                                                                                                                                       
#include<stdlib.h>                                                                                                                                                      
#include<ctype.h>                                                                                                                                                       
extern int output=0;
%}                                                                                                                                                                      
%token ifc then cp op lt gt eq sc not and or  nl num cha                                                                             
%left '|'                                                                                                                                                               
%left '&'                                                                                                                                                               
%left '<'                                                                                                                                                               
%left '>'                                                                                                                                                               
%left ')'                                                                                                                                                               
%left '('                                                                                                                                                               
%left '='                                                                                                                                                               
%left '!'                                                                                                                                                               
                                                                                                                                                             
%%
start: ifc op exp cp nl then l1 nl {printf("Input Matched\n");
         if($3){printf("True Condition.\nresult=%d\n",output);}
          else 
             {printf("False condition.\n");
             exit(0);}}                     
     | rexp nl                                                                                                                                                             
     ;                                                                                                                                                                       
exp : exp or rexp {$$=$1||$3;}                                                                                                                                       
    | exp and rexp {$$=$1&&$3;}                                                                                                                                           
    | not rexp {$$=!($2);}                                                                                                                                                 
    | rexp                                                                                                                                                                 
    ;                                                                                                                                                                       
rexp : rexp lt rexp {if($1<$3) $$=1; 
                     else
                        $$=0;}                                                                                                                       
     | rexp gt rexp   {if($1>$3) $$=1; 
                        else 
                          $$=0;}                                                                                                                       
     | not rexp       {$$=!($2);}                                                                                                                                      
     | rexp eq eq rexp    {if($1==$4) $$=1; 
                            else
                                $$=0;}                                                                                                                      
     |rexp not eq rexp    {if($1!=$4) $$=1; 
                           else
                               $$=0;}                                                                                                                      
     |op exp cp                                                                                                                                                    
     | num                                                                                                                                                                   
     | cha                                                                                                                                                                  
     ;                                                                                                                                                                       
l1: cha eq e sc {output =$3;}                                                                                                                               
  ; 
e : e '+' e {$$=$1+$3;}
  | e '-' e {$$=$1-$3;}
  | e '*' e {$$=$1*$3;}
  | e '/' e {$$=$1/$3;}
  | op e cp
  | num
  ;
%%
int yywrap()                                                                                                                                                            
{}                                                                                                                                                                      
yyerror(char const *s)                                                                                                                                                  
{                                                                                                                                                                       
    printf("Not Matched\n");                                                                                                                                            
    exit(0);                                                                                                                                                            
}                                                                                                                                                                       
int main(){                                                                                                                                                             
while(1){                                                                                                                                                               
yyparse();    
}

return 0;
}

Calc
%{
#include <ctype.h>
#include <stdio.h>
#include <math.h>
#define YYSTYPE double /* double type for Yacc stack */
int flag =0;
%}
%token NUMBER
%left '+' '-'
%left '*' '/' '^'
%right UMINUS
%%
lines : lines expr '\n' { printf("%g\n", $$); }
      | lines '\n'
      | /* empty */
;
expr : expr '+' expr { $$ = $1 + $3; }
     | expr '-' expr { $$ = $1 - $3; }
     | expr '*' expr { $$ = $1 * $3; }
     | expr '/' expr { $$ = $1 / $3; }
     | '(' expr ')' { $$ = $2; }
     | expr '^' expr { $$ = pow($1,$3);}
     | 's''q''r''t'expr{$$ =sqrt($5);}
     | 's''i''n'expr{$$ = sin($2*3.14/180);}
     | 'c''o''s'expr{$$ = cos($2*3.14/180);}
     | 'l'expr{$$ = log10($2);}
     | '-' expr %prec UMINUS { $$ = - $2; }
     | NUMBER
;
%%
float yylex() {
int c;
while ( ( c = getchar() ) == ' ' );
if ( (c == '.') || (isdigit(c)) ) {
ungetc(c, stdin);
scanf("%lf", &yylval);
return NUMBER;
}
return c;
}
void yyerror(const char *s){ 
	printf("Invalid\n");
	flag =1;
	}
void main() {
	printf("Enter any expr:\n");
	yyparse();
	if(flag==0) {
	printf("\nvalid expression");
	}
}

Loooppp
[s2021103535@centos8-linux Tue Oct 31 07:24 AM w6]$ cat q1.l
%option noyywrap                                                           
                                                                           
%{                                                                         
        #include<stdio.h>                                                  
        #include<string.h>                                                 
%}                                                                         
                                                                           
%%                                                                         
                                                                           
"if" {printf("case");}                                                     
"else if"       {printf("case");}                                          
"else"  {printf("default");}                                               
[(].[)] {printf(" %s :",yytext);}                                          
"{"     {printf(":{");}                                                    
.[;]$   {printf("%s\n",yytext);}                                           
"}"     {printf("\tbreak;\n}");}                                           
\n      {printf("%s",yytext);}                                             
                                                                           
                                                                           
%%                                                                         
                                                                           
int main()                                                                 
{                                                                          
        extern FILE *yyin,*yyout;                                          
        yyin = fopen("if.txt","r");                                        
        printf("switch(true)\n{\n");                                       
        yylex();                                                           
        return 0;                                                          
}                                                                          
                                                                           
[s2021103535@centos8-linux Tue Oct 31 07:25 AM w6]$ cat q2.l
%{                                                                         
#include <stdio.h>                                                         
#include <string.h>                                                        
%}                                                                         
                                                                           
%option noyywrap                                                           


                                                                           
%%                                                                         
"do"            { printf("while (1)"); }                                   
"}while"        { printf("if"); }                                          
"{"             { printf("{"); }                                           
"}"             { printf("}"); }                                           
");"           {printf(")");}                                              
.|\n            { printf("%s", yytext); }                                  
%%                                                                         
                                                                           
int main() {                                                               


    FILE* inputFile = fopen("do.txt", "r");                                
    if (!inputFile) {                                                      
        fprintf(stderr, "Failed to open input.txt\n");                     
        return 1;                                                          
    }                                                                      
                                                                           
    yyin = inputFile;                                                      
    yylex();                                                               
                                                                           
    fclose(inputFile);                                                     
    printf("{\ncontinue;\n}\nelse{\nbreak;\n}\n}");                        
    return 0;                                                              
}                                                                          
                                                                           
[s2021103535@centos8-linux Tue Oct 31 07:25 AM w6]$ cat q3.l
   
                                                                          
%option noyywrap                                                           
                                                                           
%{                                                                         
        #include<stdio.h>                                                  
%}                                                                         
                                                                           
%%                                                                         
[a-z]   {printf("%s",yytext);}                                             
"+"     {printf("%s","||");}                                               
"*"     {printf("%s","&&");}                                               
\n      {printf("\n");}                                                    
                                                                           
%%                                                                         
                                                                           
int main()                                                                 
{                                                                          
        extern FILE *yyin;                                                 
        yyin = fopen("arith.txt","r");                                     
        yylex();                                                           
        return 0;                                                          
}      
Conversions
I to pre
%{                                                                                                                                                     
                                                                                                                                                       
#include <stdio.h>                                                                                                                                     
#include <stdlib.h>                                                                                                                                    
#include <string.h>                                                                                                                                    
                                                                                                                                                       
char infix[100], prefix[100];                                                                                                                          
int stack[100];                                                                                                                                        
int top = -1;                                                                                                                                          
                                                                                                                                                       
int precedence(char a) {                                                                                                                               
    if (a == '+' || a == '-')                                                                                                                          
        return 1;                                                                                                                                      
    else if (a == '*' || a == '/')                                                                                                                     
        return 2;                                                                                                                                      
    else                                                                                                                                               
        return 0;                                                                                                                                      
}                                                                                                                                                      
                                                                                                                                                       
%}                                                                                                                                                     
                                                                                                                                                       
%%                                                                                                                                                     
                                                                                                                                                       
^.+$ {                                                                                                                                                 
    strcpy(infix, yytext);                                                                                                                             
                                                                                                                                                       
    int i, j = 0;                                                                                                                                      
                                                                                                                                                       
    for (i = yyleng - 1; i >= 0; i--) {                                                                                                                
        if (isalnum(infix[i]))                                                                                                                         
            prefix[j++] = infix[i];                                                                                                                    
        else if (infix[i] == ')' || infix[i] == '(') {                                                                                                 
            if (infix[i] == ')')                                                                                                                       
                stack[++top] = ')';                                                                                                                    
            else {                                                                                                                                     
                while (top != -1 && stack[top] != ')')                                                                                                 
                    prefix[j++] = stack[top--];                                                                                                        
                if (top != -1)                                                                                                                         
                    top--; // Pop the corresponding '('                                                                                                
            }                                                                                                                                          
        } else {                                                                                                                                       
            while (top != -1 && precedence(infix[i]) <= precedence(stack[top]))                                                                        
                prefix[j++] = stack[top--];                                                                                                            
            stack[++top] = infix[i];                                                                                                                   
        }                                                                                                                                              
    }                                                                                                                                                  
                                                                                                                                                       
    while (top != -1)                                                                                                                                  
        prefix[j++] = stack[top--];                                                                                                                    
                                                                                                                                                       
    for (i = j - 1; i >= 0; i--)                                                                                                                       
        printf("%c", prefix[i]);                                                                                                                       
                                                                                                                                                       
    printf("\n");                                                                                                                                      
}                                                                                                                                                      
                                                                                                                                                       
. ;                                                                                                                                                    
%%                                                                                                                                                     
                                                                                                                                                       
int yywrap(void) {                                                                                                                                     
    return 1;                                                                                                                                          
}                                                                                                                                                      
                                                                                                                                                       
int main() {                                                                                                                                           
    //printf("Enter an infix expression: ");                                                                                                           
    //scanf("%s", infix);                                                                                                                              
    yylex();                                                                                                                                           
    return 0;                                                                                                                                          
}                                                                                                                                                      
I to po
%{                                                                                                                                                     




#include <stdio.h>                                                                                                                             


#include <stdlib.h>                                                                                                                            


#include <string.h>                                                                                                                            


#define SIZE 50                                                                                                                                




	char stack[SIZE];                                                                                                                                      


	int top = -1;                                                                                                                                          




	void push(char c)                                                                                                                                      


	{                                                                                                                                                      


		if (top < SIZE - 1) {                                                                                                                              


			stack[++top] = c;                                                                                                                              


		}                                                                                                                                                  


	}                                                                                                                                                      




	char pop() {                                                                                                                                           


		if (top >= 0) {                                                                                                                                    


			return stack[top--];                                                                                                                           


		}                                                                                                                                                  


	}                                                                                                                                                      




	int get_precedence(char c) {                                                                                                                           


		if (c == '+' || c == '-') return 1;                                                                                                                


		if (c == '*' || c == '/') return 2;                                                                                                                


		return 0;                                                                                                                                          


	}                                                                                                                                                      




	%}                                                                                                                                                     




	%option noyywrap                                                                                                                                       




	%%                                                                                                                                                     




	[a-zA-Z0-9]+    { printf("%s", yytext); }                                                                                                              


	"("             { push('('); }                                                                                                                         


	")"             { while (top >= 0 && stack[top] != '(')                                                                                                


		printf("%c", pop());                                                                                                          


		pop();                                                                                                                        


	}                                                                                                                                     


[-+*/]          {                                                                                                                                      


	while (top >= 0 && get_precedence(stack[top]) >= get_precedence(yytext[0]) && stack[top] != '(')                                   


	{                                                                                                                                   


		printf("%c", pop());                                                                                                           


	}                                                                                                                                  


	push(yytext[0]);                                                                                                                   


}                                                                                                                                      


\n              { while (top >= 0) printf("%c", pop()); putchar('\n'); }                                                                               




%%                                                                                                                                                     




int main() {                                                                                                                                           

	extern FILE *yyin;
	yyin = fopen("3.txt","r");
	yylex();                                                                                                                                           


	return 0;                                                                                                                                          


}        
Other
[s2021103535@centos8-linux Tue Oct 31 07:35 AM w7]$ cat q33.l
%{
#include <stdio.h>
#include <stdlib.h>


int is_empty();
void push(char c);
char pop();

int error_flag = 0;
%}

%option noyywrap

%%

\(    { push('('); }
\)    { 
        if (is_empty()) {
            printf("Unmatched closing parenthesis at line %d\n", yylineno);
            error_flag = 1;
        } else {
            char top = pop();
            if (top != '(') {
                printf("Mismatched parentheses at line %d\n", yylineno);
                error_flag = 1;
            }
        }
    }

.     ;  
\n    ;  

%%

int main(int argc, char** argv) {
    if (argc != 2) {
        fprintf(stderr, "Usage: %s <input_file>\n", argv[0]);
        return 1;
    }
    yyin = fopen(argv[1], "r");
    if (yyin == NULL) {
        perror("Error opening file");
        return 1;
    }

    yylex();
    
    if (!is_empty()) {
        printf("Unmatched opening parenthesis at the end of the file\n");
        error_flag = 1;
    }

    fclose(yyin);

    if (error_flag) {
        printf("Parentheses are not balanced.\n");
        return 1;
    } else {
        printf("Parentheses are balanced.\n");
        return 0;
    }
}

#define MAX_STACK_SIZE 100

char stack[MAX_STACK_SIZE];
int top = -1;

int is_empty() {
    return top == -1;
}

int is_full() {
    return top == MAX_STACK_SIZE - 1;
}

void push(char c) {
    if (is_full()) {
        fprintf(stderr, "Stack overflow\n");
        exit(1);
    }
    stack[++top] = c;
}

char pop() {
    if (is_empty()) {
        fprintf(stderr, "Stack underflow\n");
        exit(1);
    }
    return stack[top--];
}
[s2021103535@centos8-linux Tue Oct 31 07:35 AM w7]$ cat q3.l
%{
#include <stdio.h>
%}

%option noyywrap

%%

"/*"    { 
            int depth = 1;
            while (depth > 0) {
                int c = input();
                if (c == EOF) {
                    fprintf(stderr, "Unterminated comment.\n");
                    return 1;
                }
                if (c == '/' && input() == '*') {
                    depth++;
                } else if (c == '*' && input() == '/') {
                    depth--;
                }
            }
        }
"//"    { 
            while (1) {
                int c = input();
                if (c == EOF || c == '\n') {
                    unput(c);
                    break;
                }
            }
        }
.       { putchar(yytext[0]); }

%%

int main()
{
    yyin = fopen("sample.c", "r");
    if (yyin == NULL) {
        perror("Error opening file");
        return 1;
    }
    yylex();
    fclose(yyin);
    return 0;
}

[s2021103535@centos8-linux Tue Oct 31 07:36 AM w7]$ cat q1.l
%option noyywrap
%{
#include <stdio.h>
int error_count = 0;
%}

%%


int|char|float|double|void    { printf("Data type: %s\n", yytext); }
if|else|while|for            { printf("Control keyword: %s\n", yytext); }
[0-9]+                       { printf("Integer constant: %s\n", yytext); }
\"[^\"\n]*\"                 { printf("String constant: %s\n", yytext); }
\/\/.*                       { printf("Comment: %s\n", yytext); }
\/\*[^*]*\*+([^/*][^*]*\*+)*\/ { printf("Comment: %s\n", yytext); }
[(){};,]                    { printf("Special character: %s\n", yytext); }
[+-/*<>=]                     {printf("operator: %s\n",yytext);}
[_a-zA-Z][_a-zA-Z0-9]*      { printf("Identifier: %s\n", yytext);}
[ \t\n]                          {}
.                            { printf("Unknown token: %s\n", yytext); error_count++; }

%%

int main()
{
    yyin = fopen("sample.c", "r");
    if (yyin == NULL) {
        perror("Error opening file");
        return 1;
    }
    yylex();
    if (error_count == 0) {
        printf("No errors found.\n");
    } else {
        printf("%d error(s) found.\n", error_count);
    }
    fclose(yyin);
    return 0;
}
                                                                                                                                              
                    
