Q1
import java.util.Arrays;
import java.util.Scanner;
import java.util.Collections;
import java.util.List;

public class ShuffleArray {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the size of the array: ");
        int size = scanner.nextInt();
        Integer[] numbers = new Integer[size];

        System.out.println("Enter elements of the array:");
        for (int i = 0; i < size; i++) {
            numbers[i] = scanner.nextInt();
        }

        // Converting array to list to use Collections.shuffle
        List<Integer> list = Arrays.asList(numbers);
        Collections.shuffle(list);
        list.toArray(numbers); // back to array

        System.out.println("Shuffled array: " + Arrays.toString(numbers));
    }
}

Q2
import java.util.Scanner;

public class ItemsAboveAverage {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the number of elements: ");
        int n = scanner.nextInt();
        double[] elements = new double[n];
        double sum = 0;

        System.out.println("Enter the elements:");
        for (int i = 0; i < n; i++) {
            elements[i] = scanner.nextDouble();
            sum += elements[i];
        }

        double average = sum / n;
        int countAbove = 0;

        for (double element : elements) {
            if (element > average) {
                countAbove++;
            }
        }

        System.out.println("Average: " + average);
        System.out.println("Number of elements above the average: " + countAbove);
    }
}

Q3
import java.util.Scanner;

public class LetterOccurrences {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter a string of characters: ");
        String input = scanner.nextLine().toLowerCase().replaceAll("[^a-z]", ""); // focusing only on letters

        int[] counts = new int[26]; // English alphabet has 26 letters

        for (char c : input.toCharArray()) {
            counts[c - 'a']++;
        }

        System.out.println("Occurrences of each letter:");
        for (int i = 0; i < counts.length; i++) {
            if (counts[i] > 0) {
                System.out.println((char) (i + 'a') + ": " + counts[i]);
            }
        }
    }
}

Q4
import java.util.Scanner;

public class SearchInArray {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the number of elements in the array: ");
        int n = scanner.nextInt();
        int[] array = new int[n];

        System.out.println("Enter elements of the array:");
        for (int i = 0; i < n; i++) {
            array[i] = scanner.nextInt();
        }

        System.out.print("Enter the number to search for: ");
        int target = scanner.nextInt();

        boolean found = false;
        for (int j : array) {
            if (j == target) {
                found = true;
                break;
            }
        }

        if (found) {
            System.out.println(target + " is found in the array.");
        } else {
            System.out.println(target + " is not found in the array.");
        }
    }
}

Q5
import java.util.*;

public class SortStudentsByScores {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the number of students: ");
        int numberOfStudents = scanner.nextInt();
        scanner.nextLine();  // Consume the remaining newline

        String[] names = new String[numberOfStudents];
        int[] scores = new int[numberOfStudents];

        System.out.println("Enter the names and scores of students:");
        for (int i = 0; i < numberOfStudents; i++) {
            System.out.print("Name: ");
            names[i] = scanner.nextLine();
            System.out.print("Score: ");
            scores[i] = scanner.nextInt();
            scanner.nextLine();  // Consume the remaining newline
        }

        // Sort by scores in descending order using a simple Bubble Sort
        for (int i = 0; i < scores.length; i++) {
            for (int j = 0; j < scores.length - i - 1; j++) {
                if (scores[j] < scores[j + 1]) {
                    int tempScore = scores[j];
                    scores[j] = scores[j + 1];
                    scores[j + 1] = tempScore;
                    String tempName = names[j];
                    names[j] = names[j + 1];
                    names[j + 1] = tempName;
                }
            }
        }

        System.out.println("Students sorted by scores in descending order:");
        for (int i = 0; i < numberOfStudents; i++) {
            System.out.println(names[i] + ": " + scores[i]);
        }
    }
}

Q6

import java.util.Scanner;

public class OverloadedAverage {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        double[] doubleValues = new double[10];

        System.out.println("Enter ten double values:");
        for (int i = 0; i < doubleValues.length; i++) {
            doubleValues[i] = scanner.nextDouble();
        }

        double averageValue = average(doubleValues);
        System.out.println("The average is: " + averageValue);
    }

    public static int average(int[] array) {
        int sum = 0;
        for (int value : array) {
            sum += value;
        }
        return sum / array.length;
    }

    public static double average(double[] array) {
        double sum = 0;
        for (double value : array) {
            sum += value;
        }
        return sum / array.length;
    }
}

Q7
import java.util.Scanner;

public class FindMinimum {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        double[] numbers = new double[10];

        System.out.println("Enter ten numbers:");
        for (int i = 0; i < numbers.length; i++) {
            numbers[i] = scanner.nextDouble();
        }

        double minValue = min(numbers);
        System.out.println("The minimum value is: " + minValue);
    }

    public static double min(double[] array) {
        double min = array[0];
        for (double value : array) {
            if (value < min) {
                min = value;
            }
        }
        return min;
    }
}

Q8
import java.util.Scanner;
import java.util.HashSet;
import java.util.Set;

public class SimpleEliminateDuplicates {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[] list = new int[10];

        System.out.println("Enter ten integers:");
        for (int i = 0; i < list.length; i++) {
            list[i] = scanner.nextInt();
        }

        int[] uniqueList = eliminateDuplicates(list);
        System.out.print("The unique numbers are: ");
        for (int num : uniqueList) {
            System.out.print(num + " ");
        }
        System.out.println();
    }

    public static int[] eliminateDuplicates(int[] list) {
        Set<Integer> set = new HashSet<>();
        for (int value : list) {
            set.add(value);
        }

        // Converting the set back to array
        int[] result = new int[set.size()];
        int i = 0;
        for (Integer value : set) {
            result[i++] = value;
        }
        return result;
    }
}

Q9
import java.util.Arrays;
import java.util.Random;

public class SearchEfficiency {
    public static void main(String[] args) {
        Random random = new Random();
        int[] numbers = new int[100000];

        // Fill the array with random integers
        for (int i = 0; i < numbers.length; i++) {
            numbers[i] = random.nextInt(100000); // Random number between 0 and 99999
        }

        // Random key to search in the array
        int key = numbers[random.nextInt(numbers.length)];

        // Linear search and measure execution time
        long startTime = System.currentTimeMillis();
        int index = linearSearch(numbers, key);
        long endTime = System.currentTimeMillis();
        long executionTimeLinear = endTime - startTime;

        System.out.println("Linear Search Execution Time: " + executionTimeLinear + " milliseconds");
        System.out.println("Linear Search - Key found at index: " + index);

        // Sort the array before binary search
        Arrays.sort(numbers);

        // Binary search and measure execution time
        startTime = System.currentTimeMillis();
        index = binarySearch(numbers, key);
        endTime = System.currentTimeMillis();
        long executionTimeBinary = endTime - startTime;

        System.out.println("Binary Search Execution Time: " + executionTimeBinary + " milliseconds");
        System.out.println("Binary Search - Key found at index: " + index);
    }

    // Linear search method
    public static int linearSearch(int[] array, int key) {
        for (int i = 0; i < array.length; i++) {
            if (array[i] == key) {
                return i;
            }
        }
        return -1; // key not found
    }

    // Binary search method
    public static int binarySearch(int[] array, int key) {
        int low = 0;
        int high = array.length - 1;

        while (low <= high) {
            int mid = (low + high) / 2;
            if (array[mid] == key) {
                return mid;
            } else if (array[mid] < key) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        return -1; // key not found
    }
}

Q10

import java.util.Scanner;

public class ArrayEquality {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Input for the first array
        System.out.print("Enter the number of elements in list1: ");
        int length1 = scanner.nextInt();
        int[] list1 = new int[length1];
        System.out.print("Enter " + length1 + " elements for list1: ");
        for (int i = 0; i < length1; i++) {
            list1[i] = scanner.nextInt();
        }

        // Input for the second array
        System.out.print("Enter the number of elements in list2: ");
        int length2 = scanner.nextInt();
        int[] list2 = new int[length2];
        System.out.print("Enter " + length2 + " elements for list2: ");
        for (int i = 0; i < length2; i++) {
            list2[i] = scanner.nextInt();
        }

        // Output whether the lists are identical
        if (equals(list1, list2)) {
            System.out.println("The two lists are strictly identical.");
        } else {
            System.out.println("The two lists are not strictly identical.");
        }
    }

    public static boolean equals(int[] list1, int[] list2) {
        if (list1.length != list2.length) {
            return false;  // Arrays of different lengths cannot be identical
        }
        for (int i = 0; i < list1.length; i++) {
            if (list1[i] != list2[i]) {
                return false;  // Arrays are not identical if any element doesn't match
            }
        }
        return true;  // Arrays are identical
    }
}

Q11

import java.util.Arrays;

public class EmployeeWorkHours {
    public static void main(String[] args) {
        // Sample data: 8 employees, 7 days of work hours each
        int[][] workHours = {
            {2, 4, 3, 4, 5, 8, 8},
            {7, 3, 4, 3, 3, 4, 4},
            {3, 3, 4, 3, 3, 2, 2},
            {9, 3, 4, 7, 3, 4, 1},
            {3, 5, 4, 3, 6, 3, 8},
            {3, 4, 4, 6, 3, 4, 4},
            {3, 7, 4, 8, 3, 8, 4},
            {6, 3, 5, 9, 2, 7, 9}
        };

        // Create an array to store total hours and employee index
        int[][] totalHours = new int[workHours.length][2];

        // Calculate total work hours for each employee
        for (int i = 0; i < workHours.length; i++) {
            totalHours[i][0] = i; // Store employee index
            totalHours[i][1] = 0; // Initialize total hours
            for (int j = 0; j < workHours[i].length; j++) {
                totalHours[i][1] += workHours[i][j]; // Sum up hours
            }
        }

        // Sort the total hours array in decreasing order of total hours
        Arrays.sort(totalHours, (a, b) -> b[1] - a[1]);

        // Display the sorted total hours and employee indices
        System.out.println("Employee work hours in decreasing order:");
        for (int[] employee : totalHours) {
            System.out.println("Employee " + employee[0] + " Total Hours: " + employee[1]);
        }
    }
}

Q12

import java.util.Scanner;
import java.util.Random;

public class SquareMatrixCheck {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Random random = new Random();

        // Get matrix size from the user
        System.out.print("Enter the size of the square matrix: ");
        int size = scanner.nextInt();

        // Create and fill the matrix with random 0s and 1s
        int[][] matrix = new int[size][size];
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                matrix[i][j] = random.nextInt(2);  // 0 or 1
            }
        }

        // Print the matrix
        System.out.println("Matrix:");
        for (int[] row : matrix) {
            for (int value : row) {
                System.out.print(value + " ");
            }
            System.out.println();
        }

        // Check rows, columns, and diagonals
        checkMatrix(matrix);
    }

    private static void checkMatrix(int[][] matrix) {
        int size = matrix.length;
        boolean found = false;

        // Check rows and columns
        for (int i = 0; i < size; i++) {
            if (checkAllSame(matrix[i])) {
                System.out.println("All elements are the same in row " + i);
                found = true;
            }

            int[] column = new int[size];
            for (int j = 0; j < size; j++) {
                column[j] = matrix[j][i];
            }
            if (checkAllSame(column)) {
                System.out.println("All elements are the same in column " + i);
                found = true;
            }
        }

        // Check diagonals
        int[] diagonal1 = new int[size];
        int[] diagonal2 = new int[size];
        for (int i = 0; i < size; i++) {
            diagonal1[i] = matrix[i][i];
            diagonal2[i] = matrix[i][size - 1 - i];
        }
        if (checkAllSame(diagonal1)) {
            System.out.println("All elements are the same in the main diagonal");
            found = true;
        }
        if (checkAllSame(diagonal2)) {
            System.out.println("All elements are the same in the counter diagonal");
            found = true;
        }

        if (!found) {
            System.out.println("No row, column, or diagonal with all the same elements.");
        }
    }

    private static boolean checkAllSame(int[] array) {
        for (int i = 1; i < array.length; i++) {
            if (array[i] != array[0]) {
                return false;
            }
        }
        return true;
    }
}

Q13

public class Fan {
    // Constant values for fan speed
    public static final int SLOW = 1;
    public static final int MEDIUM = 2;
    public static final int FAST = 3;

    // Private fields
    private int speed;
    private boolean on;
    private double radius;
    private String color;

    // Constructor (no-arg) for default fan
    public Fan() {
        this.speed = SLOW;
        this.on = false;
        this.radius = 5;
        this.color = "blue";
    }

    // Accessors (getters)
    public int getSpeed() {
        return this.speed;
    }

    public boolean isOn() {
        return this.on;
    }

    public double getRadius() {
        return this.radius;
    }

    public String getColor() {
        return this.color;
    }

    // Mutators (setters)
    public void setSpeed(int speed) {
        this.speed = speed;
    }

    public void setOn(boolean on) {
        this.on = on;
    }

    public void setRadius(double radius) {
        this.radius = radius;
    }

    public void setColor(String color) {
        this.color = color;
    }

    // toString method to describe the fan based on its current state
    public String toString() {
        if (this.on) {
            return "Fan is on - Speed: " + this.speed + ", Color: " + this.color + ", Radius: " + this.radius;
        } else {
            return "Fan is off - Color: " + this.color + ", Radius: " + this.radius;
        }
    }

    // Main method to test the Fan class
    public static void main(String[] args) {
        Fan fan1 = new Fan();
        fan1.setSpeed(FAST);
        fan1.setOn(true);
        fan1.setRadius(10);
        fan1.setColor("yellow");

        Fan fan2 = new Fan();
        fan2.setSpeed(MEDIUM);
        fan2.setOn(false);
        fan2.setRadius(5);
        fan2.setColor("blue");

        System.out.println("Fan 1: " + fan1.toString());
        System.out.println("Fan 2: " + fan2.toString());
    }
}

Q14

import java.util.Date;

public class Account {
    // Private fields
    private int id = 0;
    private double balance = 0;
    private double annualInterestRate = 0;  // Annual interest rate (percentage, e.g., 4.5)
    private Date dateCreated;

    // No-arg constructor
    public Account() {
        this.dateCreated = new Date(); // Initialize the date when account is created
    }

    // Constructor with specified id and initial balance
    public Account(int id, double balance) {
        this();
        this.id = id;
        this.balance = balance;
    }

    // Accessors (getters)
    public int getId() {
        return this.id;
    }

    public double getBalance() {
        return this.balance;
    }

    public double getAnnualInterestRate() {
        return this.annualInterestRate;
    }

    public Date getDateCreated() {
        return this.dateCreated;
    }

    // Mutators (setters)
    public void setId(int id) {
        this.id = id;
    }

    public void setBalance(double balance) {
        this.balance = balance;
    }

    public void setAnnualInterestRate(double annualInterestRate) {
        this.annualInterestRate = annualInterestRate;
    }

    // Method to calculate the monthly interest rate
    public double getMonthlyInterestRate() {
        return (this.annualInterestRate / 100) / 12;
    }

    // Method to calculate the monthly interest
    public double getMonthlyInterest() {
        return this.balance * getMonthlyInterestRate();
    }

    // Method to withdraw a specified amount from the account
    public void withdraw(double amount) {
        this.balance -= amount;
    }

    // Method to deposit a specified amount to the account
    public void deposit(double amount) {
        this.balance += amount;
    }
}

public class TestAccount {
    public static void main(String[] args) {
        // Create an Account object with an account ID of 1122, a balance of $20,000, and an annual interest rate of 4.5%
        Account myAccount = new Account(1122, 20000);
        myAccount.setAnnualInterestRate(4.5);

        // Perform transactions
        myAccount.withdraw(2500);  // Withdraw $2,500
        myAccount.deposit(3000);   // Deposit $3,000

        // Print account details
        System.out.println("Account ID: " + myAccount.getId());
        System.out.println("Current balance: $" + String.format("%.2f", myAccount.getBalance()));
        System.out.println("Monthly interest: $" + String.format("%.2f", myAccount.getMonthlyInterest()));
        System.out.println("Date created: " + myAccount.getDateCreated());
    }
}

Q15

import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class EnhancedSplit {
    public static String[] split(String s, String regex) {
        // List to hold our results
        ArrayList<String> parts = new ArrayList<>();

        // Pattern to find the tokens or delimiters
        Pattern pattern = Pattern.compile("([^" + regex + "]+" + "|" + regex + ")");
        Matcher matcher = pattern.matcher(s);

        while (matcher.find()) {
            parts.add(matcher.group());
        }

        return parts.toArray(new String[0]);
    }

    public static void main(String[] args) {
        String[] result1 = split("ab#12#453", "#");
        System.out.println(String.join(", ", result1)); // Output should include delimiters

        String[] result2 = split("a?b?gf#e", "[?#]");
        System.out.println(String.join(", ", result2)); // Output should include delimiters
    }
}

Q16

class Person {
    protected String name;
    protected String address;
    protected String phoneNumber;
    protected String emailAddress;

    public Person(String name, String address, String phoneNumber, String emailAddress) {
        this.name = name;
        this.address = address;
        this.phoneNumber = phoneNumber;
        this.emailAddress = emailAddress;
    }

    @Override
    public String toString() {
        return "Class: " + this.getClass().getSimpleName() + ", Name: " + name;
    }
}

class Student extends Person {
    public static final String FRESHMAN = "freshman";
    public static final String SOPHOMORE = "sophomore";
    public static final String JUNIOR = "junior";
    public static final String SENIOR = "senior";
    protected String status;

    public Student(String name, String address, String phoneNumber, String emailAddress, String status) {
        super(name, address, phoneNumber, emailAddress);
        this.status = status;
    }

    @Override
    public String toString() {
        return super.toString() + ", Status: " + status;
    }
}

class Employee extends Person {
    protected String office;
    protected double salary;
    protected MyDate dateHired;

    public Employee(String name, String address, String phoneNumber, String emailAddress, String office, double salary, MyDate dateHired) {
        super(name, address, phoneNumber, emailAddress);
        this.office = office;
        this.salary = salary;
        this.dateHired = dateHired;
    }

    @Override
    public String toString() {
        return super.toString() + ", Office: " + office;
    }
}

class Faculty extends Employee {
    protected String officeHours;
    protected String rank;

    public Faculty(String name, String address, String phoneNumber, String emailAddress, String office, double salary, MyDate dateHired, String officeHours, String rank) {
        super(name, address, phoneNumber, emailAddress, office, salary, dateHired);
        this.officeHours = officeHours;
        this.rank = rank;
    }

    @Override
    public String toString() {
        return super.toString() + ", Rank: " + rank;
    }
}

class Staff extends Employee {
    protected String title;

    public Staff(String name, String address, String phoneNumber, String emailAddress, String office, double salary, MyDate dateHired, String title) {
        super(name, address, phoneNumber, emailAddress, office, salary, dateHired);
        this.title = title;
    }

    @Override
    public String toString() {
        return super.toString() + ", Title: " + title;
    }
}

class MyDate {
    // Simple representation for the date; could be expanded as needed
    private int day;
    private int month;
    private int year;

    public MyDate(int day, int month, int year) {
        this.day = day;
        this.month = month;
        this.year = year;
    }

    @Override
    public String toString() {
        return day + "/" + month + "/" + year;
    }
}

public class TestProgram {
    public static void main(String[] args) {
        Person person = new Person("John Doe", "123 Elm St", "555-1234", "johndoe@example.com");
        Student student = new Student("Jane Doe", "234 Oak St", "555-5678", "janedoe@example.com", Student.FRESHMAN);
        MyDate dateHired = new MyDate(15, 10, 2020);
        Employee employee = new Employee("Jim Beam", "345 Maple St", "555-8765", "jimbeam@example.com", "12A", 50000, dateHired);
        Faculty faculty = new Faculty("Jill Hill", "456 Pine St", "555-4321", "jillhill@example.com", "34B", 75000, dateHired, "9-5", "Professor");
        Staff staff = new Staff("Jack Wall", "567 Cedar St", "555-6789", "jackwall@example.com", "78C", 65000, dateHired, "Head of Maintenance");

        System.out.println(person);
        System.out.println(student);
        System.out.println(employee);
        System.out.println(faculty);
        System.out.println(staff);
    }
}

Q17

public class GeometricObject {
    private String color = "white";
    private boolean filled = false;

    public GeometricObject() {}

    public GeometricObject(String color, boolean filled) {
        this.color = color;
        this.filled = filled;
    }

    public String getColor() {
        return color;
    }

    public void setColor(String color) {
        this.color = color;
    }

    public boolean isFilled() {
        return filled;
    }

    public void setFilled(boolean filled) {
        this.filled = filled;
    }
}

public class Triangle extends GeometricObject {
    private double side1 = 1.0;
    private double side2 = 1.0;
    private double side3 = 1.0;

    public Triangle() {}

    public Triangle(double side1, double side2, double side3) {
        this.side1 = side1;
        this.side2 = side2;
        this.side3 = side3;
    }

    public double getSide1() {
        return side1;
    }

    public double getSide2() {
        return side2;
    }

    public double getSide3() {
        return side3;
    }

    public double getArea() {
        double s = (side1 + side2 + side3) / 2;
        return Math.sqrt(s * (s - side1) * (s - side2) * (s - side3));
    }

    public double getPerimeter() {
        return side1 + side2 + side3;
    }

    @Override
    public String toString() {
        return "Triangle: side1 = " + side1 + " side2 = " + side2 + " side3 = " + side3;
    }
}

import java.util.Scanner;

public class TestTriangle {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Enter three sides of the triangle:");
        double side1 = scanner.nextDouble();
        double side2 = scanner.nextDouble();
        double side3 = scanner.nextDouble();

        System.out.println("Enter the color of the triangle:");
        String color = scanner.next();

        System.out.println("Is the triangle filled (true/false):");
        boolean filled = scanner.nextBoolean();

        Triangle triangle = new Triangle(side1, side2, side3);
        triangle.setColor(color);
        triangle.setFilled(filled);

        System.out.println("Area: " + triangle.getArea());
        System.out.println("Perimeter: " + triangle.getPerimeter());
        System.out.println("Color: " + triangle.getColor());
        System.out.println("Filled: " + triangle.isFilled());
    }
}

Q18

import java.util.ArrayList;
import java.util.Collections;

public static void sort(ArrayList<Integer> list) {
    Collections.sort(list);
}
import java.util.ArrayList;
import java.util.Scanner;

public class TestSorting {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        ArrayList<Integer> numbers = new ArrayList<>();

        System.out.println("Enter 5 numbers:");
        for (int i = 0; i < 5; i++) {
            numbers.add(scanner.nextInt());
        }

        sort(numbers);
        System.out.println("Sorted numbers: " + numbers);
    }
}
import java.util.Random;
import java.util.Scanner;

public class ArrayBoundaryCheck {
    public static void main(String[] args) {
        Random random = new Random();
        int[] numbers = new int[100];
        for (int i = 0; i < numbers.length; i++) {
            numbers[i] = random.nextInt();
        }

        Scanner scanner = new Scanner(System.in);
        try {
            System.out.println("Enter an index to retrieve:");
            int index = scanner.nextInt();
            System.out.println("Element at index " + index + ": " + numbers[index]);
        } catch (ArrayIndexOutOfBoundsException e) {
            System.out.println("Out of Bounds");
        }
    }
}

Q19
import java.nio.file.*;
import java.io.IOException;

public class RemoveStringFromFile {
    public static void main(String[] args) {
        Path path = Paths.get("example.txt");
        String toRemove = "specificString"; // Change this to whatever string needs to be removed.
        try {
            String content = new String(Files.readAllBytes(path));
            content = content.replace(toRemove, "");
            Files.write(path, content.getBytes());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}

Q20

import java.io.*;

public class CountFileContent {
    public static void main(String[] args) {
        String fileName = "example.txt";
        try (BufferedReader reader = new BufferedReader(new FileReader(fileName))) {
            int charCount = 0;
            int wordCount = 0;
            int lineCount = 0;
            String line;
            while ((line = reader.readLine()) != null) {
                lineCount++;
                charCount += line.length();
                String[] words = line.split("\\s+");
                wordCount += words.length;
            }
            System.out.println("Number of Characters: " + charCount);
            System.out.println("Number of Words: " + wordCount);
            System.out.println("Number of Lines: " + lineCount);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}

Q21
import java.util.*;
import java.nio.file.*;
import java.io.IOException;

public class CalculateScores {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the filename: ");
        String filename = scanner.next();
        try {
            String content = new String(Files.readAllBytes(Paths.get(filename)));
            String[] scores = content.split("\\s+");
            double sum = 0;
            for (String score : scores) {
                sum += Double.parseDouble(score);
            }
            System.out.println("Total: " + sum);
            System.out.println("Average: " + sum / scores.length);
        } catch (IOException | NumberFormatException e) {
            e.printStackTrace();
        }
    }
}

Q22
import java.io.*;
import java.util.*;

public class CreateAndSortIntegers {
    public static void main(String[] args) {
        String fileName = "Exercise12_15.txt";
        try (PrintWriter output = new PrintWriter(new FileOutputStream(fileName, true))) {
            Random random = new Random();
            for (int i = 0; i < 100; i++) {
                output.print(random.nextInt(100) + " ");
            }
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }

        try (Scanner input = new Scanner(new File(fileName))) {
            List<Integer> numbers = new ArrayList<>();
            while (input.hasNextInt()) {
                numbers.add(input.nextInt());
            }
            Collections.sort(numbers);
            System.out.println("Sorted Numbers: " + numbers);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
    }
}

File handling

q1:
import java.util.*;
import java.io.*;
public class Student {
	        public static void main(String[] args) throws FileNotFoundException{
	                File f=new File("ph_no.txt");
	                Scanner sc=new Scanner(System.in);
	                PrintWriter pw=new PrintWriter(f);
while(true){	           
	            System.out.println("Enter student name:");
	                        String s=sc.next();
	                        if(s.equals("exit")) break;
	                        pw.write(s);
	                        pw.write("\n");	
}
	                pw.close();	  
                sc.close();
                Scanner sc1=new Scanner(f);
                while(sc1.hasNext()){
                    String p=sc1.next();
                    System.out.println("the students are: "+p);
                }
                sc1.close();
        }
}
q2 : 1st program
import java.util.*;
import java.io.*;
public class Person {
        public static void main(String[] args) throws FileNotFoundException{
                File f=new File("ph_no.txt");
                Scanner sc=new Scanner(System.in);
                PrintWriter pw=new PrintWriter(f);
                while(true){
                        System.out.println("Enter person name:");
                        String s=sc.next();
                        if(s.equals("exit")) break;
                        pw.write(s);
                        pw.write("\n");
                        System.out.println("Enter phone number");
                        pw.write(sc.next());
                        pw.write("\n");
                }
                pw.close();
        }
}
q2:2nd program
import java.io.*;
import java.util.*;

public class Phone {
        public static void main(String[] args) throws FileNotFoundException{
                File f=new File("ph_no.txt");
                Scanner sc1=new Scanner(f);
                Scanner sc2=new Scanner(System.in);
                boolean flag=false;
                System.out.println("Enter phone number to search:");
                String s=sc2.next();
                while(sc1.hasNext()){
                        String p=sc1.next();
                        if(sc1.next().equals(s)){
                                System.out.println("Name of the person is "+p);
                                flag=true;
                                break;
                        }
                }
                if(!flag){
                        System.out.println("No such phone number exists");
                }
                sc1.close();
        }
}

